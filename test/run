#!/bin/bash 

CLASS_PATH="/home/amotsok/proj/ssl/conscrypt/openjdk/build/libs/conscrypt-openjdk-1.1.0-SNAPSHOT.jar:."
RUN_SSL_CLIENT="cd ../java-client && java -classpath $CLASS_PATH SslClient"

#TODO: unlink server from terminal

function run_server()
{
 killall server &> /dev/null
 echo >> server.log
 echo "command line: $1" >> server.log
 eval "$1 &>> server.log &"
 sleep 1
}

function server_second_level_cert_and_key_java_client_second_level_cert_success()
{
 SERVER_CERT="../server/foo-cert.pem"
 SERVER_KEY="../server/foo-key.pem"
 SERVER_RUN="../server/server $SERVER_CERT $SERVER_KEY"

 run_server "$SERVER_RUN"

 CLIENT_CERT=$SERVER_CERT
 CLIENT_RUN="$RUN_SSL_CLIENT $SERVER_CERT"
 CLIENT_OUT=$(eval $CLIENT_RUN 2>&1)

 echo $CLIENT_OUT | grep -q "I hear you" \
  && echo $0 "Success"  \
  || { echo $1 "Failure: $CLIENT_OUT" && echo "${SERVER_RUN}" && echo "${CLIENT_RUN}"; }
}

function server_second_level_cert_and_key_java_client_first_level_cert_success()
{
 SERVER_CERT="../server/foo-cert.pem"
 SERVER_KEY="../server/foo-key.pem"
 SERVER_RUN="../server/server $SERVER_CERT $SERVER_KEY"

 run_server "$SERVER_RUN"

 CLIENT_CERT=../ca/ca-cert.pem
 CLIENT_RUN="$RUN_SSL_CLIENT $CLIENT_CERT"
 CLIENT_OUT=$(eval $CLIENT_RUN 2>&1)
 
 echo $CLIENT_OUT | grep -q "I hear you" \
  && echo $0 "Success"  \
  || { echo $1 "Failure: $CLIENT_OUT" && echo "${SERVER_RUN}" && echo "${CLIENT_RUN}"; }
}

function server_first_level_cert_and_key_java_client_first_level_cert_success()
{
 killall server &> /dev/null
 ../server/server ../ca/ca-cert.pem ../ca/ca-key.pem &> /dev/null &

 sleep 1
 CLIENT_OUT=$(eval $RUN_SSL_CLIENT ../ca/ca-cert.pem)
 
 echo $CLIENT_OUT | grep -q "I hear you" && echo $0 "Success" || echo $1 "Failure: $CLIENT_OUT"
}

function server_first_level_cert_and_key_java_client_second_level_cert_failure()
{
 killall server &> /dev/null
 ../server/server ../ca/ca-cert.pem ../ca/ca-key.pem &> /dev/null &

 sleep 1
 CLIENT_OUT=$(eval $RUN_SSL_CLIENT ../server/foo-cert.pem 2>&1)
 
 echo $CLIENT_OUT \
   | grep -q "unable to find valid certification path to requested target" \
   && echo $0 "Success" || echo $0 "Failure: $CLIENT_OUT"
}

function server_second_level_cert_and_key_java_client_unrelated_cert_failure()
{
 killall server &> /dev/null
 ../server/server ../server/foo-cert.pem ../server/foo-key.pem &> /dev/null &

 sleep 1
 CLIENT_OUT=$(eval $RUN_SSL_CLIENT unrelared-cert/cert.pem 2>&1)
 
 echo $CLIENT_OUT \
   | grep -q "unable to find valid certification path to requested target" \
   && echo $0 "Success" || echo $0 "Failure: $CLIENT_OUT"
}

#echo -n "1:" && server_second_level_cert_and_key_java_client_second_level_cert_success 
echo -n "2:" && server_second_level_cert_and_key_java_client_first_level_cert_success
#echo -n "3:" && server_first_level_cert_and_key_java_client_first_level_cert_success
#echo -n "4:" && server_first_level_cert_and_key_java_client_second_level_cert_failure
#echo -n "5:" && server_second_level_cert_and_key_java_client_unrelated_cert_failure
